// =============================================================================
// 45678901234567890123456789012345678901234567890123456789012345678901234567890
// =============================================================================
// 慶應義塾大学・理工学部・飯島研究室
// 2017年度・ソフトウェア工学実習
// Counter 2017-04 飯島 正 (iijima@ae.keio.ac.jp)
// =============================================================================
package counter;
// =============================================================================
/**
 * カウンタ(CounterRanged): モデル(上限下限の範囲指定カウンタ).
 * @author 飯島 正 (iijima@ae.keio.ac.jp)
 * @version <br>
 * ---- 0305c-005-20170421a [iijima] カウンタ(Counter)  継承の導入(メソッドのオーバーライド; アクセッサによるアクセス)<br>
 * ---- 0305b-005-20170421a [iijima] カウンタ(Counter)  継承の導入(メソッドのオーバーライド; 属性をpublicに変更)<br>
 * ---- 0305a-005-20170421a [iijima] カウンタ(Counter)  継承の導入(属性/メソッドの追加)<br>
 * ---- 0304a-004-20170417a [iijima] カウンタ(Counter)  進捗バーによる多重ビュー<br>
 * ---- 0303b-003-20170417a [iijima] カウンタ(Counter)  モデルに限界値を格納し，上限値もチェックする<br>
 * ---- 0303a-003-20170417a [iijima] カウンタ(Counter)  エラーを例外で識別する<br>
 * ---- 0302c-002-20170414a [iijima] カウンタ(Counter)  エラーメッセージをモデル中の配列で管理する<br>
 * ---- 0302b-002-20170414a [iijima] カウンタ(Counter)  エラーメッセージを配列で管理する<br>
 * ---- 0302a-002-20170414a [iijima] カウンタ(Counter)  エラーコードでエラーを識別する<br>
 * ---- 0301c-001-20170414a [iijima] カウンタ(Counter)　共通部分をprivateの下請けメソッドに抽出する<br>
 * ---- 0301b-001-20170414a [iijima] カウンタ(Counter)　モデルを抽出する(MVCの分離)<br>
 * ---- 0301a-001-20170410a [iijima] カウンタ(Counter)　ボタンを増やして機能を拡張する
 */
// =============================================================================
public class CounterRanged extends Counter {
    // =========================================================================
    // /////////////////////////////////////////////////////////////////////////
    // ///// 属性(カウンタの上限値と下限値) ////////////////////////////////////
    // /////////////////////////////////////////////////////////////////////////
    // =========================================================================
    /**
     * [値属性] 下限値.
     */
    // =========================================================================
    private int min = 0;
    // =========================================================================
    /**
     * [値属性] 上限値.
     */
    // =========================================================================
    private int max = 20;
    // =========================================================================
    // /////////////////////////////////////////////////////////////////////////
    // ///// コンストラクタ (初期化) ///////////////////////////////////////////
    // /////////////////////////////////////////////////////////////////////////
    // =========================================================================
    /**
     * [コンストラクタ] 初期化する.
     */
    // =========================================================================
    public CounterRanged() {
        min = 0;
        max = 20;
    }
    // =========================================================================
    // /////////////////////////////////////////////////////////////////////////
    // ///// インスタンスメソッド //////////////////////////////////////////////
    // /////////////////////////////////////////////////////////////////////////
    // =========================================================================
    /**
     *  カウントアップする.
     */
    // =========================================================================
    @Override
    public void up() {
        int count = getCount(); //  <--------------------- 追加する
        if (count < max) {      //  <--------------------- エラーになる
            count++;            //  <--------------------- エラーになる
            setCount( count );  //  <--------------------- 追加する
        } else {
            throw new IllegalStateException( 
                    String.format("カウントが上限値%dなのにアップさせようとした",max) );
        }
    }
    // =========================================================================
    /**
     * カウントダウンする.
     */
    // =========================================================================
    @Override
    public void down() {
        int count = getCount(); //  <--------------------- 追加する
        if (count > min) {      //  <--------------------- エラーになる
            count--;            //  <--------------------- エラーになる
            setCount( count );  //  <--------------------- 追加する
        } else {
            throw new IllegalStateException(
                    String.format("カウントが下限値%dなのにダウンさせようとした", min));
        }
    }
    // =========================================================================
    // /////////////////////////////////////////////////////////////////////////
    // ///// インスタンスメソッド: アクセッサ //////////////////////////////////
    // /////////////////////////////////////////////////////////////////////////
    // =========================================================================
    /**
     * [getter] 下限値を返す.
     * @return 下限値
     */
    // =========================================================================
    public int getMin() {
        return (min);
    }
    // =========================================================================
    /**
     * [getter] 上限値を返す.
     * @return 上限値
     */
    // =========================================================================
    public int getMax() {
        return (max);
    }
    // =========================================================================
    /**
     * [setter] 下限値を設定する.
     * @param min 下限値
     */
    // =========================================================================
    public void setMin(int min) {
        this.min = min;
    }
    // =========================================================================
    /**
     * [setter] 上限値を設定する.
     * @param max 上限値
     */
    // =========================================================================
    public void setMax(int max) {
        this.max = max;
    }
    // =========================================================================
}
// =============================================================================
